Visual & Renderers
==================

X-visual rendering 3d scene with Three.js, wrapped in a rendere, Thrender system.
The Thrender handling 2 components, Visual & Obj3, by converting parameters in a
Visual to Obj3. The later is represented in scene as an `THREE.Object3D <https://threejs.org/docs/index.html#api/en/core/Object3D>`__
object.

- Visual

The Visual Component specify the visual effect such as materail texture asset or wireframe type.

- Obj3

The Obj3 Component specify the geometry or shape such as plane, box or path type.

See :ref:`obj3-transform-guide`

Thrender the Default
--------------------

Thrender is the xv default renderer, handling Visual and Obj3 components. Created by xworld.startUpdate().

Example:

.. code-block:: javascript

        var cube = ecs.createEntity({
            id: 'cube0',
            Obj3: { geom: Obj3Type.BOX,
                    box: [200, 120, 80],    // bounding box
                    mesh: undefined },      // Thrender will create this from Visual
            Visual:{vtype: AssetType.mesh,
                    // Three use document to load assets, which doesn't exist while testing.
                    // 'null' acts as a flag to let thrender create a ram texture.
                    asset: null },
            });
..

Visual.vtype & Obj3.geom Handling
+++++++++++++++++++++++++++++++++

Visual.vtype specify an AssetType;

Obe3.geom specify shape or model type.

When Thrender is created by xworld.startUpdate(), all entities' Obj3 components
will been converted to a scene object, with visual effect of Visual component.

Model geometry and materail are good examples to get this idea. Another is the
point visual and points object, where point is a visual effect a points array,
the scene object consists many points.

Visual.vtype
____________

.. _vtype-point:

- AssetType.point

The created `THREE.Object3D <https://threejs.org/docs/#api/en/core/Object3D>`__
will be rendered as an array of WebGl points.

The point type's material can only be a `THREE.ShaderMaterial <https://threejs.org/docs/index.html#api/en/materials/ShaderMaterial>`_.

.. _vtype-refPoint:

- AssetType.refPoint

Same as *point*, except that this type use the *asset* property specifying entity id
of which the vertices' position is copied from, the entity's Obj3.mesh.

The refPoint type's material can only be a `THREE.ShaderMaterial <https://threejs.org/docs/index.html#api/en/materials/ShaderMaterial>`_.

Visual.paras
____________

Visual.paras has different usage for different vtype.

For vtype = mesh
................

Visual.paras.tex_alpha:

range 0 ~ 1, for both texture file and RAM texture generated by code.

For point & refPoint
....................

It's been used for vtype = :ref:`AssetType.refPoint<vtype-refPoint>` or
:ref:`AssetType.point<vtype-point>`.

For these vtype, it's usually used together with :ref:`animtype-u-morphi`
and :ref:`animtype-uniform`.

Check it for how Visual.paras and ModelSeqs.script.paras work together to change
glsl/shaders behaviour.

If the Visual.asset specified a gltf asset, the gltf mesh will be converted into
visible points, as particles (e.g. the vertices are tweened with uniforms).

If the Visual.asset parameter is null or undefined, the Obj3.mesh will be created
by Thrender using this entity.Visual.paras.obj3type, which can be one of geometry
type of :ref:`XComponent <api-xcomponents>` value.

-- paras.nodes

This parameter used only for creating mesh from gltf assets. It's a string array
of node's name in gltf. Model of these nodes will be converted into points.

-- paras.paths

This parameter used only for creating mesh from svg assets. It's a string array
of path names in svg.

- AssetType.refPoint

TODO test case as example.

- AssetType.voxel

A `Voxel <https://en.wikipedia.org/wiki/Voxel>`_ is handled in x-visual as a single
WebGl point.

-- paras.noise

If true, the generated Object3D object will have a 'a_noise' attribute. For animation
type :ref:`AnimType.U_MORPHi <animtype-u-morphi>` and :ref:`AnimType UNIFORM<animtype-uniform>`,
this value is used for scale the distance.

-- paras.vert_scale

A string for vertex size scale. Here is how the default particles vertex shader
handling this parameter.

.. code-block:: javascript

	gl_PointSize = size * `${paras.vert_scale || '10.0'}`;
..

-- paras.u_tex

A string pointing to file in 'asset' folder. If the is not undefined, the vtype's
flag, ShaderFlag.defaultex is ignored.

u_tex is a shader's uniforms parameter, which means only Visual using THREE.ShaderMaterial
can has a u_tex parameter.

Visual.asset
____________

Specify a gltf asset file, e.g. int the test case of html/gltf:

::

    test/html/gitf-city.html/script/Citysys.initCity(),

    Visual.asset: 'city/scene.gltf'

The file located in 'assets/city/scene.gltf' and referenced bin file together with
texture files are loaded by :ref:`xv-gltf-loader` of gltf loader.

Dynamic Text
------------

test: test/html/dynatex.html

In x-visual, 2D text are supported by system `CanvTex <../jsdoc/XComponent.Dynatex.html>`_
using an html canvas as the dynamic texture, with an API function for updating
text.

The *Dynatex.style* and *Dynatex.font* are used as canvas style and font attribute,
the same as html canvas style, see `MDN Canvas.style <https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle>`_
and `css font <https://developer.mozilla.org/en-US/docs/Web/CSS/font>`_.

Canvas size, font size and scene objects are working together to produce the 3D
visualized effects.

.. image:: imgs/004-dynatex-size.jpg
    :width: 420px

Example:

.. code-block:: javascript

    Dynatex: {
        style: '#00c0c0',
        font: '64px Arial',
        xywh: {x: 2, y: 128, w: 256, h: 256}
    }
